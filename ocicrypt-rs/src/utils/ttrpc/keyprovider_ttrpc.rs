// This file is generated by ttrpc-compiler 0.6.2. Do not edit
// @generated

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unknown_lints)]
#![allow(clipto_camel_casepy)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
#![allow(clippy::all)]
use protobuf::{CodedInputStream, CodedOutputStream, Message};
use std::collections::HashMap;
use std::sync::Arc;

#[derive(Clone)]
pub struct KeyProviderServiceClient {
    client: ::ttrpc::Client,
}

impl KeyProviderServiceClient {
    pub fn new(client: ::ttrpc::Client) -> Self {
        KeyProviderServiceClient {
            client,
        }
    }

    pub fn wrap_key(&self, ctx: ttrpc::context::Context, req: &super::keyprovider::KeyProviderKeyWrapProtocolInput) -> ::ttrpc::Result<super::keyprovider::KeyProviderKeyWrapProtocolOutput> {
        let mut cres = super::keyprovider::KeyProviderKeyWrapProtocolOutput::new();
        ::ttrpc::client_request!(self, ctx, req, "keyprovider.KeyProviderService", "WrapKey", cres);
        Ok(cres)
    }

    pub fn un_wrap_key(&self, ctx: ttrpc::context::Context, req: &super::keyprovider::KeyProviderKeyWrapProtocolInput) -> ::ttrpc::Result<super::keyprovider::KeyProviderKeyWrapProtocolOutput> {
        let mut cres = super::keyprovider::KeyProviderKeyWrapProtocolOutput::new();
        ::ttrpc::client_request!(self, ctx, req, "keyprovider.KeyProviderService", "UnWrapKey", cres);
        Ok(cres)
    }
}

struct WrapKeyMethod {
    service: Arc<Box<dyn KeyProviderService + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for WrapKeyMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, keyprovider, KeyProviderKeyWrapProtocolInput, wrap_key);
        Ok(())
    }
}

struct UnWrapKeyMethod {
    service: Arc<Box<dyn KeyProviderService + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for UnWrapKeyMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, keyprovider, KeyProviderKeyWrapProtocolInput, un_wrap_key);
        Ok(())
    }
}

pub trait KeyProviderService {
    fn wrap_key(&self, _ctx: &::ttrpc::TtrpcContext, _: super::keyprovider::KeyProviderKeyWrapProtocolInput) -> ::ttrpc::Result<super::keyprovider::KeyProviderKeyWrapProtocolOutput> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/keyprovider.KeyProviderService/WrapKey is not supported".to_string())))
    }
    fn un_wrap_key(&self, _ctx: &::ttrpc::TtrpcContext, _: super::keyprovider::KeyProviderKeyWrapProtocolInput) -> ::ttrpc::Result<super::keyprovider::KeyProviderKeyWrapProtocolOutput> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/keyprovider.KeyProviderService/UnWrapKey is not supported".to_string())))
    }
}

pub fn create_key_provider_service(service: Arc<Box<dyn KeyProviderService + Send + Sync>>) -> HashMap<String, Box<dyn ::ttrpc::MethodHandler + Send + Sync>> {
    let mut methods = HashMap::new();

    methods.insert("/keyprovider.KeyProviderService/WrapKey".to_string(),
                    Box::new(WrapKeyMethod{service: service.clone()}) as Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/keyprovider.KeyProviderService/UnWrapKey".to_string(),
                    Box::new(UnWrapKeyMethod{service: service.clone()}) as Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods
}
