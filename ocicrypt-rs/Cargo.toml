[package]
name = "ocicrypt-rs"
version = "0.1.0"
description = "the OCI image spec implementation of container image encryption"
repository = "https://github.com/containers/ocicrypt-rs"
readme = "README.md"
license = "Apache-2.0"
authors = ["The ocicrypt Authors"]
edition = "2021"

[dependencies]
anyhow.workspace = true
aes = { workspace = true, optional = true }
async-trait = { workspace = true, optional = true }
crypto = { path = "../attestation-agent/deps/crypto", default-features = false, optional = true }
base64.workspace = true
base64-serde = { workspace = true, optional = true }
cfg-if.workspace = true
ctr = { workspace = true, optional = true }
hmac = { workspace = true, optional = true }
josekit = { version = ">=0.7", optional = true }
kbc = { path = "../attestation-agent/kbc", default-features = false, optional = true }
openssl = { workspace = true, features = ["vendored"], optional = true }
pin-project-lite = { version = "0.2.16", optional = true }
protos = { path = "../protos", default-features = false, optional = true }
resource_uri = { path = "../attestation-agent/deps/resource_uri", optional = true }
ring = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
sha2 = { workspace = true, optional = true }
tokio = { workspace = true, features = ["rt-multi-thread"], optional = true }
tonic = { workspace = true, optional = true }
ttrpc = { workspace = true, features = ["async"], optional = true }
zeroize = { workspace = true, optional = true }

[build-dependencies]

[dev-dependencies]
aes-gcm.workspace = true
ctrlc = { version = "3.5", features = ["termination"] }
openssl = { workspace = true, features = ["vendored"] }
tokio = { workspace = true, features = ["time", "signal"] }

[features]
default = ["block-cipher-openssl", "keywrap-jwe", "keywrap-keyprovider-cmd"]

async-io = ["tokio"]

block-cipher = []
# Use ring as pseudo random number generator
block-cipher-ring = [
    "aes",
    "base64-serde",
    "ctr",
    "hmac",
    "ring",
    "pin-project-lite",
    "sha2",
    "kbc?/rust-crypto",
    "block-cipher",
]
# Use openssl as pseudo random number generator
block-cipher-openssl = [
    "aes",
    "base64-serde",
    "ctr",
    "hmac",
    "openssl",
    "pin-project-lite",
    "sha2",
    "kbc?/openssl",
    "block-cipher",
]

keywrap-jwe = ["josekit"]
keywrap-keyprovider = []
keywrap-keyprovider-cmd = ["keywrap-keyprovider"]
keywrap-keyprovider-grpc = [
    "keywrap-keyprovider",
    "tokio/net",
    "tonic",
    "protos/grpc",
]
keywrap-keyprovider-ttrpc = [
    "keywrap-keyprovider",
    "async-trait",
    "ttrpc",
    "tokio",
    "protos/ttrpc",
]

# Use KBC to request KEK
keywrap-keyprovider-native = [
    "keywrap-keyprovider",
    "tokio/net",
    "tokio/sync",
    "crypto/rust-crypto",
    "zeroize",
    "kbc/cc_kbc",
    "kbc/rust-crypto",
    "kbc/sample_kbc",
    "kbc/sgx-attester",
    "resource_uri",
]
