// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:api.UnsealSecretInput)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnsealSecretInput {
    // message fields
    // @@protoc_insertion_point(field:api.UnsealSecretInput.secret)
    pub secret: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.UnsealSecretInput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnsealSecretInput {
    fn default() -> &'a UnsealSecretInput {
        <UnsealSecretInput as ::protobuf::Message>::default_instance()
    }
}

impl UnsealSecretInput {
    pub fn new() -> UnsealSecretInput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret",
            |m: &UnsealSecretInput| { &m.secret },
            |m: &mut UnsealSecretInput| { &mut m.secret },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnsealSecretInput>(
            "UnsealSecretInput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnsealSecretInput {
    const NAME: &'static str = "UnsealSecretInput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.secret = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.secret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.secret.is_empty() {
            os.write_bytes(1, &self.secret)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnsealSecretInput {
        UnsealSecretInput::new()
    }

    fn clear(&mut self) {
        self.secret.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnsealSecretInput {
        static instance: UnsealSecretInput = UnsealSecretInput {
            secret: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnsealSecretInput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnsealSecretInput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnsealSecretInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsealSecretInput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:api.UnsealSecretOutput)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnsealSecretOutput {
    // message fields
    // @@protoc_insertion_point(field:api.UnsealSecretOutput.plaintext)
    pub plaintext: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.UnsealSecretOutput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnsealSecretOutput {
    fn default() -> &'a UnsealSecretOutput {
        <UnsealSecretOutput as ::protobuf::Message>::default_instance()
    }
}

impl UnsealSecretOutput {
    pub fn new() -> UnsealSecretOutput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plaintext",
            |m: &UnsealSecretOutput| { &m.plaintext },
            |m: &mut UnsealSecretOutput| { &mut m.plaintext },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnsealSecretOutput>(
            "UnsealSecretOutput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnsealSecretOutput {
    const NAME: &'static str = "UnsealSecretOutput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.plaintext = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.plaintext.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.plaintext);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.plaintext.is_empty() {
            os.write_bytes(1, &self.plaintext)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnsealSecretOutput {
        UnsealSecretOutput::new()
    }

    fn clear(&mut self) {
        self.plaintext.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnsealSecretOutput {
        static instance: UnsealSecretOutput = UnsealSecretOutput {
            plaintext: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnsealSecretOutput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnsealSecretOutput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnsealSecretOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsealSecretOutput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:api.GetResourceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetResourceRequest {
    // message fields
    // @@protoc_insertion_point(field:api.GetResourceRequest.ResourcePath)
    pub ResourcePath: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.GetResourceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetResourceRequest {
    fn default() -> &'a GetResourceRequest {
        <GetResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetResourceRequest {
    pub fn new() -> GetResourceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ResourcePath",
            |m: &GetResourceRequest| { &m.ResourcePath },
            |m: &mut GetResourceRequest| { &mut m.ResourcePath },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetResourceRequest>(
            "GetResourceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetResourceRequest {
    const NAME: &'static str = "GetResourceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ResourcePath = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ResourcePath.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ResourcePath);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ResourcePath.is_empty() {
            os.write_string(1, &self.ResourcePath)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetResourceRequest {
        GetResourceRequest::new()
    }

    fn clear(&mut self) {
        self.ResourcePath.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetResourceRequest {
        static instance: GetResourceRequest = GetResourceRequest {
            ResourcePath: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetResourceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetResourceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResourceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:api.GetResourceResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetResourceResponse {
    // message fields
    // @@protoc_insertion_point(field:api.GetResourceResponse.Resource)
    pub Resource: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:api.GetResourceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetResourceResponse {
    fn default() -> &'a GetResourceResponse {
        <GetResourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetResourceResponse {
    pub fn new() -> GetResourceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Resource",
            |m: &GetResourceResponse| { &m.Resource },
            |m: &mut GetResourceResponse| { &mut m.Resource },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetResourceResponse>(
            "GetResourceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetResourceResponse {
    const NAME: &'static str = "GetResourceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Resource = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Resource.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Resource);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Resource.is_empty() {
            os.write_bytes(1, &self.Resource)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetResourceResponse {
        GetResourceResponse::new()
    }

    fn clear(&mut self) {
        self.Resource.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetResourceResponse {
        static instance: GetResourceResponse = GetResourceResponse {
            Resource: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetResourceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetResourceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetResourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResourceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:api.SecureMountRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SecureMountRequest {
    // message fields
    // @@protoc_insertion_point(field:api.SecureMountRequest.driver)
    pub driver: ::std::string::String,
    // @@protoc_insertion_point(field:api.SecureMountRequest.driver_options)
    pub driver_options: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:api.SecureMountRequest.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:api.SecureMountRequest.fstype)
    pub fstype: ::std::string::String,
    // @@protoc_insertion_point(field:api.SecureMountRequest.options)
    pub options: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:api.SecureMountRequest.mount_point)
    pub mount_point: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.SecureMountRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SecureMountRequest {
    fn default() -> &'a SecureMountRequest {
        <SecureMountRequest as ::protobuf::Message>::default_instance()
    }
}

impl SecureMountRequest {
    pub fn new() -> SecureMountRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "driver",
            |m: &SecureMountRequest| { &m.driver },
            |m: &mut SecureMountRequest| { &mut m.driver },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "driver_options",
            |m: &SecureMountRequest| { &m.driver_options },
            |m: &mut SecureMountRequest| { &mut m.driver_options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &SecureMountRequest| { &m.source },
            |m: &mut SecureMountRequest| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fstype",
            |m: &SecureMountRequest| { &m.fstype },
            |m: &mut SecureMountRequest| { &mut m.fstype },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &SecureMountRequest| { &m.options },
            |m: &mut SecureMountRequest| { &mut m.options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mount_point",
            |m: &SecureMountRequest| { &m.mount_point },
            |m: &mut SecureMountRequest| { &mut m.mount_point },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SecureMountRequest>(
            "SecureMountRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SecureMountRequest {
    const NAME: &'static str = "SecureMountRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.driver = is.read_string()?;
                },
                18 => {
                    self.driver_options.push(is.read_string()?);
                },
                26 => {
                    self.source = is.read_string()?;
                },
                34 => {
                    self.fstype = is.read_string()?;
                },
                42 => {
                    self.options.push(is.read_string()?);
                },
                50 => {
                    self.mount_point = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.driver.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.driver);
        }
        for value in &self.driver_options {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source);
        }
        if !self.fstype.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.fstype);
        }
        for value in &self.options {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if !self.mount_point.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.mount_point);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.driver.is_empty() {
            os.write_string(1, &self.driver)?;
        }
        for v in &self.driver_options {
            os.write_string(2, &v)?;
        };
        if !self.source.is_empty() {
            os.write_string(3, &self.source)?;
        }
        if !self.fstype.is_empty() {
            os.write_string(4, &self.fstype)?;
        }
        for v in &self.options {
            os.write_string(5, &v)?;
        };
        if !self.mount_point.is_empty() {
            os.write_string(6, &self.mount_point)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SecureMountRequest {
        SecureMountRequest::new()
    }

    fn clear(&mut self) {
        self.driver.clear();
        self.driver_options.clear();
        self.source.clear();
        self.fstype.clear();
        self.options.clear();
        self.mount_point.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SecureMountRequest {
        static instance: SecureMountRequest = SecureMountRequest {
            driver: ::std::string::String::new(),
            driver_options: ::std::vec::Vec::new(),
            source: ::std::string::String::new(),
            fstype: ::std::string::String::new(),
            options: ::std::vec::Vec::new(),
            mount_point: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SecureMountRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SecureMountRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SecureMountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SecureMountRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:api.SecureMountResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SecureMountResponse {
    // message fields
    // @@protoc_insertion_point(field:api.SecureMountResponse.mount_path)
    pub mount_path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:api.SecureMountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SecureMountResponse {
    fn default() -> &'a SecureMountResponse {
        <SecureMountResponse as ::protobuf::Message>::default_instance()
    }
}

impl SecureMountResponse {
    pub fn new() -> SecureMountResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mount_path",
            |m: &SecureMountResponse| { &m.mount_path },
            |m: &mut SecureMountResponse| { &mut m.mount_path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SecureMountResponse>(
            "SecureMountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SecureMountResponse {
    const NAME: &'static str = "SecureMountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mount_path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mount_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mount_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mount_path.is_empty() {
            os.write_string(1, &self.mount_path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SecureMountResponse {
        SecureMountResponse::new()
    }

    fn clear(&mut self) {
        self.mount_path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SecureMountResponse {
        static instance: SecureMountResponse = SecureMountResponse {
            mount_path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SecureMountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SecureMountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SecureMountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SecureMountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tapi.proto\x12\x03api\"+\n\x11UnsealSecretInput\x12\x16\n\x06secret\
    \x18\x01\x20\x01(\x0cR\x06secret\"2\n\x12UnsealSecretOutput\x12\x1c\n\tp\
    laintext\x18\x01\x20\x01(\x0cR\tplaintext\"8\n\x12GetResourceRequest\x12\
    \"\n\x0cResourcePath\x18\x01\x20\x01(\tR\x0cResourcePath\"1\n\x13GetReso\
    urceResponse\x12\x1a\n\x08Resource\x18\x01\x20\x01(\x0cR\x08Resource\"\
    \xbe\x01\n\x12SecureMountRequest\x12\x16\n\x06driver\x18\x01\x20\x01(\tR\
    \x06driver\x12%\n\x0edriver_options\x18\x02\x20\x03(\tR\rdriverOptions\
    \x12\x16\n\x06source\x18\x03\x20\x01(\tR\x06source\x12\x16\n\x06fstype\
    \x18\x04\x20\x01(\tR\x06fstype\x12\x18\n\x07options\x18\x05\x20\x03(\tR\
    \x07options\x12\x1f\n\x0bmount_point\x18\x06\x20\x01(\tR\nmountPoint\"4\
    \n\x13SecureMountResponse\x12\x1d\n\nmount_path\x18\x01\x20\x01(\tR\tmou\
    ntPath2V\n\x13SealedSecretService\x12?\n\x0cUnsealSecret\x12\x16.api.Uns\
    ealSecretInput\x1a\x17.api.UnsealSecretOutput2V\n\x12GetResourceService\
    \x12@\n\x0bGetResource\x12\x17.api.GetResourceRequest\x1a\x18.api.GetRes\
    ourceResponse2V\n\x12SecureMountService\x12@\n\x0bSecureMount\x12\x17.ap\
    i.SecureMountRequest\x1a\x18.api.SecureMountResponseb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(UnsealSecretInput::generated_message_descriptor_data());
            messages.push(UnsealSecretOutput::generated_message_descriptor_data());
            messages.push(GetResourceRequest::generated_message_descriptor_data());
            messages.push(GetResourceResponse::generated_message_descriptor_data());
            messages.push(SecureMountRequest::generated_message_descriptor_data());
            messages.push(SecureMountResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
