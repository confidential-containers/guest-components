// This file is @generated by prost-build.
/// Get the primary evidence from the guest.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEvidenceRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub runtime_data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAdditionalEvidenceRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub runtime_data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEvidenceResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub evidence: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenRequest {
    #[prost(string, tag = "1")]
    pub token_type: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub token: ::prost::alloc::vec::Vec<u8>,
}
/// Extend the dynamic/runtime measurement with given materials. This would change the state
/// of current TEE's status, e.g. TDX's RTMR, (v)TPM's PCR, by adding a record in eventlog.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtendRuntimeMeasurementRequest {
    /// The domain to which this event entry belongs. This domain is used to distinguish the semantics of log entries in different contexts.
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    /// Concrete operation type that this event entry records.
    #[prost(string, tag = "2")]
    pub operation: ::prost::alloc::string::String,
    /// Detailed content of the operation that this event entry records.
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    /// Which PCR will be extended with the hash of this entry.
    #[prost(uint64, optional, tag = "4")]
    pub register_index: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExtendRuntimeMeasurementResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BindInitDataRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub digest: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BindInitDataResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTeeTypeRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTeeTypeResponse {
    #[prost(string, tag = "1")]
    pub tee: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod attestation_agent_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct AttestationAgentServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AttestationAgentServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AttestationAgentServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AttestationAgentServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AttestationAgentServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_evidence(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEvidenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetEvidenceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/attestation_agent.AttestationAgentService/GetEvidence",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "attestation_agent.AttestationAgentService",
                        "GetEvidence",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_additional_evidence(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAdditionalEvidenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetEvidenceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/attestation_agent.AttestationAgentService/GetAdditionalEvidence",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "attestation_agent.AttestationAgentService",
                        "GetAdditionalEvidence",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_token(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/attestation_agent.AttestationAgentService/GetToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "attestation_agent.AttestationAgentService",
                        "GetToken",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn extend_runtime_measurement(
            &mut self,
            request: impl tonic::IntoRequest<super::ExtendRuntimeMeasurementRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExtendRuntimeMeasurementResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/attestation_agent.AttestationAgentService/ExtendRuntimeMeasurement",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "attestation_agent.AttestationAgentService",
                        "ExtendRuntimeMeasurement",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn bind_init_data(
            &mut self,
            request: impl tonic::IntoRequest<super::BindInitDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BindInitDataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/attestation_agent.AttestationAgentService/BindInitData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "attestation_agent.AttestationAgentService",
                        "BindInitData",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_tee_type(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTeeTypeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTeeTypeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/attestation_agent.AttestationAgentService/GetTeeType",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "attestation_agent.AttestationAgentService",
                        "GetTeeType",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod attestation_agent_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AttestationAgentServiceServer.
    #[async_trait]
    pub trait AttestationAgentService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_evidence(
            &self,
            request: tonic::Request<super::GetEvidenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetEvidenceResponse>,
            tonic::Status,
        >;
        async fn get_additional_evidence(
            &self,
            request: tonic::Request<super::GetAdditionalEvidenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetEvidenceResponse>,
            tonic::Status,
        >;
        async fn get_token(
            &self,
            request: tonic::Request<super::GetTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTokenResponse>,
            tonic::Status,
        >;
        async fn extend_runtime_measurement(
            &self,
            request: tonic::Request<super::ExtendRuntimeMeasurementRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExtendRuntimeMeasurementResponse>,
            tonic::Status,
        >;
        async fn bind_init_data(
            &self,
            request: tonic::Request<super::BindInitDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BindInitDataResponse>,
            tonic::Status,
        >;
        async fn get_tee_type(
            &self,
            request: tonic::Request<super::GetTeeTypeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTeeTypeResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct AttestationAgentServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AttestationAgentServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for AttestationAgentServiceServer<T>
    where
        T: AttestationAgentService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/attestation_agent.AttestationAgentService/GetEvidence" => {
                    #[allow(non_camel_case_types)]
                    struct GetEvidenceSvc<T: AttestationAgentService>(pub Arc<T>);
                    impl<
                        T: AttestationAgentService,
                    > tonic::server::UnaryService<super::GetEvidenceRequest>
                    for GetEvidenceSvc<T> {
                        type Response = super::GetEvidenceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetEvidenceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AttestationAgentService>::get_evidence(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetEvidenceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/attestation_agent.AttestationAgentService/GetAdditionalEvidence" => {
                    #[allow(non_camel_case_types)]
                    struct GetAdditionalEvidenceSvc<T: AttestationAgentService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: AttestationAgentService,
                    > tonic::server::UnaryService<super::GetAdditionalEvidenceRequest>
                    for GetAdditionalEvidenceSvc<T> {
                        type Response = super::GetEvidenceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAdditionalEvidenceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AttestationAgentService>::get_additional_evidence(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAdditionalEvidenceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/attestation_agent.AttestationAgentService/GetToken" => {
                    #[allow(non_camel_case_types)]
                    struct GetTokenSvc<T: AttestationAgentService>(pub Arc<T>);
                    impl<
                        T: AttestationAgentService,
                    > tonic::server::UnaryService<super::GetTokenRequest>
                    for GetTokenSvc<T> {
                        type Response = super::GetTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AttestationAgentService>::get_token(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/attestation_agent.AttestationAgentService/ExtendRuntimeMeasurement" => {
                    #[allow(non_camel_case_types)]
                    struct ExtendRuntimeMeasurementSvc<T: AttestationAgentService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: AttestationAgentService,
                    > tonic::server::UnaryService<super::ExtendRuntimeMeasurementRequest>
                    for ExtendRuntimeMeasurementSvc<T> {
                        type Response = super::ExtendRuntimeMeasurementResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ExtendRuntimeMeasurementRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AttestationAgentService>::extend_runtime_measurement(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ExtendRuntimeMeasurementSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/attestation_agent.AttestationAgentService/BindInitData" => {
                    #[allow(non_camel_case_types)]
                    struct BindInitDataSvc<T: AttestationAgentService>(pub Arc<T>);
                    impl<
                        T: AttestationAgentService,
                    > tonic::server::UnaryService<super::BindInitDataRequest>
                    for BindInitDataSvc<T> {
                        type Response = super::BindInitDataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BindInitDataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AttestationAgentService>::bind_init_data(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BindInitDataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/attestation_agent.AttestationAgentService/GetTeeType" => {
                    #[allow(non_camel_case_types)]
                    struct GetTeeTypeSvc<T: AttestationAgentService>(pub Arc<T>);
                    impl<
                        T: AttestationAgentService,
                    > tonic::server::UnaryService<super::GetTeeTypeRequest>
                    for GetTeeTypeSvc<T> {
                        type Response = super::GetTeeTypeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTeeTypeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AttestationAgentService>::get_tee_type(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTeeTypeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for AttestationAgentServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "attestation_agent.AttestationAgentService";
    impl<T> tonic::server::NamedService for AttestationAgentServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
