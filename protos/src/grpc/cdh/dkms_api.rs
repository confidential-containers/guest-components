// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptRequest {
    #[prost(string, tag = "1")]
    pub key_id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub plaintext: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub algorithm: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub aad: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "5")]
    pub iv: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "6")]
    pub padding_mode: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptResponse {
    #[prost(string, tag = "1")]
    pub key_id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub ciphertext_blob: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub iv: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub algorithm: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub padding_mode: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecryptRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub ciphertext_blob: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub key_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub algorithm: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub aad: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "5")]
    pub iv: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "6")]
    pub padding_mode: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecryptResponse {
    #[prost(string, tag = "1")]
    pub key_id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub plaintext: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub algorithm: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub padding_mode: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretValueRequest {
    #[prost(string, tag = "1")]
    pub secret_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version_stage: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub version_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub fetch_extended_config: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretValueResponse {
    #[prost(string, tag = "1")]
    pub secret_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub secret_type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub secret_data: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub secret_data_type: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    pub version_stages: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "6")]
    pub version_id: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub create_time: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub last_rotation_date: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub next_rotation_date: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub extended_config: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub automatic_rotation: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub rotation_interval: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(int32, tag = "1")]
    pub status_code: i32,
    #[prost(string, tag = "2")]
    pub error_code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
