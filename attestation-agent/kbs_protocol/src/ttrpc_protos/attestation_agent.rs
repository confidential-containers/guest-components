// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `attestation-agent.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:attestation_agent.GetEvidenceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetEvidenceRequest {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetEvidenceRequest.RuntimeData)
    pub RuntimeData: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetEvidenceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetEvidenceRequest {
    fn default() -> &'a GetEvidenceRequest {
        <GetEvidenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetEvidenceRequest {
    pub fn new() -> GetEvidenceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "RuntimeData",
            |m: &GetEvidenceRequest| { &m.RuntimeData },
            |m: &mut GetEvidenceRequest| { &mut m.RuntimeData },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetEvidenceRequest>(
            "GetEvidenceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetEvidenceRequest {
    const NAME: &'static str = "GetEvidenceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.RuntimeData = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.RuntimeData.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.RuntimeData);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.RuntimeData.is_empty() {
            os.write_bytes(1, &self.RuntimeData)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetEvidenceRequest {
        GetEvidenceRequest::new()
    }

    fn clear(&mut self) {
        self.RuntimeData.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetEvidenceRequest {
        static instance: GetEvidenceRequest = GetEvidenceRequest {
            RuntimeData: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetEvidenceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetEvidenceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetEvidenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEvidenceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.GetEvidenceResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetEvidenceResponse {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetEvidenceResponse.Evidence)
    pub Evidence: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetEvidenceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetEvidenceResponse {
    fn default() -> &'a GetEvidenceResponse {
        <GetEvidenceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetEvidenceResponse {
    pub fn new() -> GetEvidenceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Evidence",
            |m: &GetEvidenceResponse| { &m.Evidence },
            |m: &mut GetEvidenceResponse| { &mut m.Evidence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetEvidenceResponse>(
            "GetEvidenceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetEvidenceResponse {
    const NAME: &'static str = "GetEvidenceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Evidence = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Evidence.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Evidence);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Evidence.is_empty() {
            os.write_bytes(1, &self.Evidence)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetEvidenceResponse {
        GetEvidenceResponse::new()
    }

    fn clear(&mut self) {
        self.Evidence.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetEvidenceResponse {
        static instance: GetEvidenceResponse = GetEvidenceResponse {
            Evidence: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetEvidenceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetEvidenceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetEvidenceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEvidenceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.GetTokenRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTokenRequest {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetTokenRequest.TokenType)
    pub TokenType: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetTokenRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTokenRequest {
    fn default() -> &'a GetTokenRequest {
        <GetTokenRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTokenRequest {
    pub fn new() -> GetTokenRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TokenType",
            |m: &GetTokenRequest| { &m.TokenType },
            |m: &mut GetTokenRequest| { &mut m.TokenType },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTokenRequest>(
            "GetTokenRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTokenRequest {
    const NAME: &'static str = "GetTokenRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.TokenType = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.TokenType.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.TokenType);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.TokenType.is_empty() {
            os.write_string(1, &self.TokenType)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTokenRequest {
        GetTokenRequest::new()
    }

    fn clear(&mut self) {
        self.TokenType.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTokenRequest {
        static instance: GetTokenRequest = GetTokenRequest {
            TokenType: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTokenRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTokenRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTokenRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTokenRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.GetTokenResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTokenResponse {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetTokenResponse.Token)
    pub Token: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetTokenResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTokenResponse {
    fn default() -> &'a GetTokenResponse {
        <GetTokenResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTokenResponse {
    pub fn new() -> GetTokenResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Token",
            |m: &GetTokenResponse| { &m.Token },
            |m: &mut GetTokenResponse| { &mut m.Token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTokenResponse>(
            "GetTokenResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTokenResponse {
    const NAME: &'static str = "GetTokenResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Token = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Token.is_empty() {
            os.write_bytes(1, &self.Token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTokenResponse {
        GetTokenResponse::new()
    }

    fn clear(&mut self) {
        self.Token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTokenResponse {
        static instance: GetTokenResponse = GetTokenResponse {
            Token: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTokenResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTokenResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTokenResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTokenResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.ExtendRuntimeMeasurementRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExtendRuntimeMeasurementRequest {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.ExtendRuntimeMeasurementRequest.Domain)
    pub Domain: ::std::string::String,
    // @@protoc_insertion_point(field:attestation_agent.ExtendRuntimeMeasurementRequest.Operation)
    pub Operation: ::std::string::String,
    // @@protoc_insertion_point(field:attestation_agent.ExtendRuntimeMeasurementRequest.Content)
    pub Content: ::std::string::String,
    // @@protoc_insertion_point(field:attestation_agent.ExtendRuntimeMeasurementRequest.RegisterIndex)
    pub RegisterIndex: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.ExtendRuntimeMeasurementRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtendRuntimeMeasurementRequest {
    fn default() -> &'a ExtendRuntimeMeasurementRequest {
        <ExtendRuntimeMeasurementRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExtendRuntimeMeasurementRequest {
    pub fn new() -> ExtendRuntimeMeasurementRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Domain",
            |m: &ExtendRuntimeMeasurementRequest| { &m.Domain },
            |m: &mut ExtendRuntimeMeasurementRequest| { &mut m.Domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Operation",
            |m: &ExtendRuntimeMeasurementRequest| { &m.Operation },
            |m: &mut ExtendRuntimeMeasurementRequest| { &mut m.Operation },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Content",
            |m: &ExtendRuntimeMeasurementRequest| { &m.Content },
            |m: &mut ExtendRuntimeMeasurementRequest| { &mut m.Content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "RegisterIndex",
            |m: &ExtendRuntimeMeasurementRequest| { &m.RegisterIndex },
            |m: &mut ExtendRuntimeMeasurementRequest| { &mut m.RegisterIndex },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtendRuntimeMeasurementRequest>(
            "ExtendRuntimeMeasurementRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtendRuntimeMeasurementRequest {
    const NAME: &'static str = "ExtendRuntimeMeasurementRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Domain = is.read_string()?;
                },
                18 => {
                    self.Operation = is.read_string()?;
                },
                26 => {
                    self.Content = is.read_string()?;
                },
                32 => {
                    self.RegisterIndex = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Domain);
        }
        if !self.Operation.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Operation);
        }
        if !self.Content.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.Content);
        }
        if let Some(v) = self.RegisterIndex {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Domain.is_empty() {
            os.write_string(1, &self.Domain)?;
        }
        if !self.Operation.is_empty() {
            os.write_string(2, &self.Operation)?;
        }
        if !self.Content.is_empty() {
            os.write_string(3, &self.Content)?;
        }
        if let Some(v) = self.RegisterIndex {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtendRuntimeMeasurementRequest {
        ExtendRuntimeMeasurementRequest::new()
    }

    fn clear(&mut self) {
        self.Domain.clear();
        self.Operation.clear();
        self.Content.clear();
        self.RegisterIndex = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtendRuntimeMeasurementRequest {
        static instance: ExtendRuntimeMeasurementRequest = ExtendRuntimeMeasurementRequest {
            Domain: ::std::string::String::new(),
            Operation: ::std::string::String::new(),
            Content: ::std::string::String::new(),
            RegisterIndex: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtendRuntimeMeasurementRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtendRuntimeMeasurementRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtendRuntimeMeasurementRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtendRuntimeMeasurementRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.ExtendRuntimeMeasurementResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExtendRuntimeMeasurementResponse {
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.ExtendRuntimeMeasurementResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExtendRuntimeMeasurementResponse {
    fn default() -> &'a ExtendRuntimeMeasurementResponse {
        <ExtendRuntimeMeasurementResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExtendRuntimeMeasurementResponse {
    pub fn new() -> ExtendRuntimeMeasurementResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExtendRuntimeMeasurementResponse>(
            "ExtendRuntimeMeasurementResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExtendRuntimeMeasurementResponse {
    const NAME: &'static str = "ExtendRuntimeMeasurementResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExtendRuntimeMeasurementResponse {
        ExtendRuntimeMeasurementResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExtendRuntimeMeasurementResponse {
        static instance: ExtendRuntimeMeasurementResponse = ExtendRuntimeMeasurementResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExtendRuntimeMeasurementResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExtendRuntimeMeasurementResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExtendRuntimeMeasurementResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtendRuntimeMeasurementResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.InitDataPlaintext)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InitDataPlaintext {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.InitDataPlaintext.Content)
    pub Content: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:attestation_agent.InitDataPlaintext.Algorithm)
    pub Algorithm: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.InitDataPlaintext.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InitDataPlaintext {
    fn default() -> &'a InitDataPlaintext {
        <InitDataPlaintext as ::protobuf::Message>::default_instance()
    }
}

impl InitDataPlaintext {
    pub fn new() -> InitDataPlaintext {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Content",
            |m: &InitDataPlaintext| { &m.Content },
            |m: &mut InitDataPlaintext| { &mut m.Content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Algorithm",
            |m: &InitDataPlaintext| { &m.Algorithm },
            |m: &mut InitDataPlaintext| { &mut m.Algorithm },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InitDataPlaintext>(
            "InitDataPlaintext",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InitDataPlaintext {
    const NAME: &'static str = "InitDataPlaintext";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Content = is.read_bytes()?;
                },
                18 => {
                    self.Algorithm = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Content);
        }
        if !self.Algorithm.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Algorithm);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Content.is_empty() {
            os.write_bytes(1, &self.Content)?;
        }
        if !self.Algorithm.is_empty() {
            os.write_string(2, &self.Algorithm)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InitDataPlaintext {
        InitDataPlaintext::new()
    }

    fn clear(&mut self) {
        self.Content.clear();
        self.Algorithm.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InitDataPlaintext {
        static instance: InitDataPlaintext = InitDataPlaintext {
            Content: ::std::vec::Vec::new(),
            Algorithm: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InitDataPlaintext {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InitDataPlaintext").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InitDataPlaintext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitDataPlaintext {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.BindInitDataRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BindInitDataRequest {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.BindInitDataRequest.Digest)
    pub Digest: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.BindInitDataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BindInitDataRequest {
    fn default() -> &'a BindInitDataRequest {
        <BindInitDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl BindInitDataRequest {
    pub fn new() -> BindInitDataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Digest",
            |m: &BindInitDataRequest| { &m.Digest },
            |m: &mut BindInitDataRequest| { &mut m.Digest },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BindInitDataRequest>(
            "BindInitDataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BindInitDataRequest {
    const NAME: &'static str = "BindInitDataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Digest = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Digest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.Digest);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Digest.is_empty() {
            os.write_bytes(1, &self.Digest)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BindInitDataRequest {
        BindInitDataRequest::new()
    }

    fn clear(&mut self) {
        self.Digest.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BindInitDataRequest {
        static instance: BindInitDataRequest = BindInitDataRequest {
            Digest: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BindInitDataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BindInitDataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BindInitDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BindInitDataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.BindInitDataResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BindInitDataResponse {
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.BindInitDataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BindInitDataResponse {
    fn default() -> &'a BindInitDataResponse {
        <BindInitDataResponse as ::protobuf::Message>::default_instance()
    }
}

impl BindInitDataResponse {
    pub fn new() -> BindInitDataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BindInitDataResponse>(
            "BindInitDataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BindInitDataResponse {
    const NAME: &'static str = "BindInitDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BindInitDataResponse {
        BindInitDataResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BindInitDataResponse {
        static instance: BindInitDataResponse = BindInitDataResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BindInitDataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BindInitDataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BindInitDataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BindInitDataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.GetTeeTypeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTeeTypeRequest {
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetTeeTypeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTeeTypeRequest {
    fn default() -> &'a GetTeeTypeRequest {
        <GetTeeTypeRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTeeTypeRequest {
    pub fn new() -> GetTeeTypeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTeeTypeRequest>(
            "GetTeeTypeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTeeTypeRequest {
    const NAME: &'static str = "GetTeeTypeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTeeTypeRequest {
        GetTeeTypeRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTeeTypeRequest {
        static instance: GetTeeTypeRequest = GetTeeTypeRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTeeTypeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTeeTypeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTeeTypeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTeeTypeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:attestation_agent.GetTeeTypeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTeeTypeResponse {
    // message fields
    // @@protoc_insertion_point(field:attestation_agent.GetTeeTypeResponse.tee)
    pub tee: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:attestation_agent.GetTeeTypeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTeeTypeResponse {
    fn default() -> &'a GetTeeTypeResponse {
        <GetTeeTypeResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTeeTypeResponse {
    pub fn new() -> GetTeeTypeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tee",
            |m: &GetTeeTypeResponse| { &m.tee },
            |m: &mut GetTeeTypeResponse| { &mut m.tee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTeeTypeResponse>(
            "GetTeeTypeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTeeTypeResponse {
    const NAME: &'static str = "GetTeeTypeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tee = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tee.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tee.is_empty() {
            os.write_string(1, &self.tee)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTeeTypeResponse {
        GetTeeTypeResponse::new()
    }

    fn clear(&mut self) {
        self.tee.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTeeTypeResponse {
        static instance: GetTeeTypeResponse = GetTeeTypeResponse {
            tee: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTeeTypeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTeeTypeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTeeTypeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTeeTypeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17attestation-agent.proto\x12\x11attestation_agent\"6\n\x12GetEviden\
    ceRequest\x12\x20\n\x0bRuntimeData\x18\x01\x20\x01(\x0cR\x0bRuntimeData\
    \"1\n\x13GetEvidenceResponse\x12\x1a\n\x08Evidence\x18\x01\x20\x01(\x0cR\
    \x08Evidence\"/\n\x0fGetTokenRequest\x12\x1c\n\tTokenType\x18\x01\x20\
    \x01(\tR\tTokenType\"(\n\x10GetTokenResponse\x12\x14\n\x05Token\x18\x01\
    \x20\x01(\x0cR\x05Token\"\xae\x01\n\x1fExtendRuntimeMeasurementRequest\
    \x12\x16\n\x06Domain\x18\x01\x20\x01(\tR\x06Domain\x12\x1c\n\tOperation\
    \x18\x02\x20\x01(\tR\tOperation\x12\x18\n\x07Content\x18\x03\x20\x01(\tR\
    \x07Content\x12)\n\rRegisterIndex\x18\x04\x20\x01(\x04H\0R\rRegisterInde\
    x\x88\x01\x01B\x10\n\x0e_RegisterIndex\"\"\n\x20ExtendRuntimeMeasurement\
    Response\"K\n\x11InitDataPlaintext\x12\x18\n\x07Content\x18\x01\x20\x01(\
    \x0cR\x07Content\x12\x1c\n\tAlgorithm\x18\x02\x20\x01(\tR\tAlgorithm\"-\
    \n\x13BindInitDataRequest\x12\x16\n\x06Digest\x18\x01\x20\x01(\x0cR\x06D\
    igest\"\x16\n\x14BindInitDataResponse\"\x13\n\x11GetTeeTypeRequest\"&\n\
    \x12GetTeeTypeResponse\x12\x10\n\x03tee\x18\x01\x20\x01(\tR\x03tee2\x8e\
    \x04\n\x17AttestationAgentService\x12\\\n\x0bGetEvidence\x12%.attestatio\
    n_agent.GetEvidenceRequest\x1a&.attestation_agent.GetEvidenceResponse\
    \x12S\n\x08GetToken\x12\".attestation_agent.GetTokenRequest\x1a#.attesta\
    tion_agent.GetTokenResponse\x12\x83\x01\n\x18ExtendRuntimeMeasurement\
    \x122.attestation_agent.ExtendRuntimeMeasurementRequest\x1a3.attestation\
    _agent.ExtendRuntimeMeasurementResponse\x12_\n\x0cBindInitData\x12&.atte\
    station_agent.BindInitDataRequest\x1a'.attestation_agent.BindInitDataRes\
    ponse\x12Y\n\nGetTeeType\x12$.attestation_agent.GetTeeTypeRequest\x1a%.a\
    ttestation_agent.GetTeeTypeResponseb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(GetEvidenceRequest::generated_message_descriptor_data());
            messages.push(GetEvidenceResponse::generated_message_descriptor_data());
            messages.push(GetTokenRequest::generated_message_descriptor_data());
            messages.push(GetTokenResponse::generated_message_descriptor_data());
            messages.push(ExtendRuntimeMeasurementRequest::generated_message_descriptor_data());
            messages.push(ExtendRuntimeMeasurementResponse::generated_message_descriptor_data());
            messages.push(InitDataPlaintext::generated_message_descriptor_data());
            messages.push(BindInitDataRequest::generated_message_descriptor_data());
            messages.push(BindInitDataResponse::generated_message_descriptor_data());
            messages.push(GetTeeTypeRequest::generated_message_descriptor_data());
            messages.push(GetTeeTypeResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
